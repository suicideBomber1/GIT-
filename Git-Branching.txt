Git Branching
=============

Branching means you diverge from the main line and work on with changes without messing with the original code.

**** Git branching is a killer feature ****

To create a new branch to master
$ git branch <branch name>

To point HEAD pointer to the new branch, we need to checkout this branch.
$ git checkout <branch name>

Now all the changes made will be in this new branch and will not affect the master branch

To create a new branch and switch to it at the same time, you can run the git checkout command with the -b switch:
$ git checkout -b <branch name>

This is shorthand for:

$ git branch <branch name>
$ git checkout <branch name>

Deleting a branch (if necessary after merging the branch with master)
$ git branch -d hotfix

Git Merging
============

Suppose you’ve decided that your issue #53 work is complete and ready to be merged into your master branch. In order to do that, you’ll merge your iss53 branch into master. All you have to do is check out the branch you wish to merge into and then run the git merge command:

$ git checkout master
  Switched to branch 'master'
$ git merge iss53
  Merge made by the 'recursive' strategy.
  index.html |    1 +
  1 file changed, 1 insertion(+)

$ git branch -d iss53

The git branch command does more than just create and delete branches. If you run it with no arguments, you get a simple listing of your current branches:
$ git branch (or git br (I have aliased it in my case))

To see the last commit on each branch, you can run git branch -v:
$ git br -v

To see which branches are already merged:
$ git br --merged
(Lists the branches that are already merged)

To see branches that are not merged
$ git br --no-merged

To delete the branch
$ git br -d <branch name> WILL FAIL !!!!
$ git br -D <branch name> WILL WORK ***

The options described above --merged and --no-merged will, if not given a commit or a branch name as an argument shows you what is, respectively, merged or not merged on your current branch

We can provide an additional argument to ask about the merge state wrt some other branch without checking out that branch first, as in, what is not merged into the master branch
$ git br --no-merged master





